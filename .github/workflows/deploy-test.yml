name: Deploy to Kubernetes test env

env:
  BERLIN_IONIC_IMAGE_TAG: '0.3'
  BERLIN_API_IMAGE_TAG: '0.7'
  CHART_VERSION: 0.1.0

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create debug file
      run: |
        echo "DIGITALOCEAN_ACCESS_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" >> debug.txt
        echo "DIGITALOCEAN_USERNAME=${{ secrets.DIGITALOCEAN_USERNAME }}" >> debug.txt
        echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> debug.txt
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> debug.txt
        echo "KUBECONFIG=${{ secrets.KUBECONFIG }}" >> debug.txt
        echo "TEST_DATABASE_NAME=${{ secrets.TEST_DATABASE_NAME }}" >> debug.txt
        echo "TEST_DATABASE_PASSWORD=${{ secrets.TEST_DATABASE_PASSWORD }}" >> debug.txt
        echo "TEST_DATABASE_USERNAME=${{ secrets.TEST_DATABASE_USERNAME }}" >> debug.txt
        echo "TEST_ENV=${{ secrets.TEST_ENV }}" >> debug.txt
        echo "TEST_URL=${{ secrets.TEST_URL }}" >> debug.txt

    - name: Upload debug file as artifact
      uses: actions/upload-artifact@v3
      with:
        name: debug-file
        path: debug.txt

    - name: Set up DigitalOcean kubectl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Deploy to Test Environment
      run: |
        echo 'Logging into to DigitalOcean Container Registry'
        echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u "${{ secrets.DIGITALOCEAN_USERNAME }}" --password-stdin
        doctl registry login

        echo 'Setting up Helm'
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
        echo 'Create kubeconfig file'
        echo "${{ secrets.KUBECONFIG }}" > /home/runner/config.txt
        export KUBECONFIG=/home/runner/config.txt

        helm upgrade --install berlin-release-test ./ \
          --version $CHART_VERSION \
          --namespace test \
          --values ./values-test.yaml \
          --set allowSnippetAnnotations=true \
          --set global.namespace=${{ secrets.TEST_ENV }} \
          --set frontend.envs.name=${{ secrets.TEST_ENV }} \
          --set frontend.url=${{ secrets.TEST_URL }} \
          --set frontend.image.tag=${{ env.BERLIN_IONIC_IMAGE_TAG }} \
          --set backend.image.tag=${{ env.BERLIN_API_IMAGE_TAG }} \
          --set backend.envs.jwtSecret=${{ secrets.JWT_SECRET }} \
          --set backend.envs.jwtRefreshSecret=${{ secrets.JWT_REFRESH_SECRET }} \
          --set backend.envs.env=${{ secrets.TEST_ENV }} \
          --set backend.envs.dbName=${{ secrets.TEST_DATABASE_NAME }} \
          --set backend.envs.dbUserName=${{ secrets.TEST_DATABASE_USERNAME }} \
          --set backend.envs.dbPassword=${{ secrets.TEST_DATABASE_PASSWORD }} \
          --set postgres.name=${{ secrets.TEST_DATABASE_NAME }} \
          --set postgres.userName=${{ secrets.TEST_DATABASE_USERNAME }} \
          --set postgres.password=${{ secrets.TEST_DATABASE_PASSWORD }} \
          --atomic \
          --timeout 10m \
          --wait \
          --debug

        echo 'Waiting for all pods to be in Running state'
        kubectl wait --for=condition=ready pod --all --namespace test --timeout=600s
